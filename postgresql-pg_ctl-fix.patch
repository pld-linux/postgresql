--- src/bin/pg_ctl/pg_ctl.c.orig	2006-04-04 15:52:48.000000000 +0000
+++ src/bin/pg_ctl/pg_ctl.c	2006-04-04 16:43:27.000000000 +0000
@@ -373,9 +373,11 @@
 	int			i;
 	char		portstr[32];
+	char		sockstr[256];
 	char	   *p;
 	char	   *q;
 
 	*portstr = '\0';
+	*sockstr = '\0';
 
 	/* post_opts */
 	for (p = post_opts; *p;)
@@ -400,7 +402,7 @@
 	 * This parsing code isn't amazingly bright either, but it should be
 	 * okay for valid port settings.
 	 */
-	if (!*portstr)
+	if (!*portstr || !*sockstr)
 	{
 		char	  **optlines;
 
@@ -432,8 +432,7 @@
 
 				while (isspace((unsigned char) *p))
 					p++;
-				if (strncmp(p, "port", 4) != 0)
-					continue;
+				if (!strncmp(p, "port", 4) != 0) {
 				p += 4;
 				while (isspace((unsigned char) *p))
 					p++;
@@ -452,6 +451,26 @@
 				/* and save the argument value */
 				StrNCpy(portstr, p, Min((q - p) + 1, sizeof(portstr)));
 				/* keep looking, maybe there is another */
+				} else if(!strncmp(p, "unix_socket_directory", 21)) {
+					p += 21;
+					while (isspace((unsigned char) *p))
+						p++;
+					if (*p != '=')
+						continue;
+					p++;
+					/* advance past any whitespace/quoting */
+					while (isspace((unsigned char) *p) || *p == '\'' || *p == '"')
+						p++;
+					/* find end of value (not including any ending quote/comment!) */
+					q = p;
+					while (*q &&
+							!(isspace((unsigned char) *q) ||
+								*q == '\'' || *q == '"' || *q == '#'))
+						q++;
+					/* and save the argument value */
+					StrNCpy(sockstr, p, Min((q - p) + 1, sizeof(portstr)));
+					/* keep looking, maybe there is another */
+				}
 			}
 		}
 	}
@@ -440,7 +456,7 @@
 
 	for (i = 0; i < wait_seconds; i++)
 	{
-		if ((conn = PQsetdbLogin(NULL, portstr, NULL, NULL,
+		if ((conn = PQsetdbLogin((!*sockstr ? NULL : sockstr), portstr, NULL, NULL,
 								 "postgres", NULL, NULL)) != NULL &&
 			(PQstatus(conn) == CONNECTION_OK ||
 			 (strcmp(PQerrorMessage(conn),
