--- postgresql-7.0.3/src/bin/psql/tab-complete.c.wiget	Fri Apr 13 17:05:43 2001
+++ postgresql-7.0.3/src/bin/psql/tab-complete.c	Fri Apr 13 18:36:40 2001
@@ -50,8 +50,8 @@
 #include "common.h"
 #include "settings.h"
 
-#if defined(HAVE_FILENAME_COMPLETION_FUNCTION) && !defined(HAVE_FILENAME_COMPLETION_FUNCTION_DECL)
-char	   *filename_completion_function(char *, int);
+#if defined(HAVE_RL_FILENAME_COMPLETION_FUNCTION) && !defined(HAVE_RL_FILENAME_COMPLETION_FUNCTION_DECL)
+char	   *rl_filename_completion_function(char *, int);
 
 #endif
 
@@ -62,9 +62,9 @@
 /* Forward declaration of functions */
 static char **psql_completion(char *text, int start, int end);
 static char *create_command_generator(char *text, int state);
-static char *complete_from_query(char *text, int state);
-static char *complete_from_const(char *text, int state);
-static char *complete_from_list(char *text, int state);
+static char *complete_from_query(const char *text, int state);
+static char *complete_from_const(const char *text, int state);
+static char *complete_from_list(const char *text, int state);
 
 static PGresult *exec_query(char *query);
 char	   *quote_file_name(char *text, int match_type, char *quote_pointer);
@@ -152,13 +152,13 @@
    4) The list of attributes to the given table.
 */
 #define COMPLETE_WITH_QUERY(query) \
-do { completion_charp = query; matches = completion_matches(text, complete_from_query); } while(0)
+do { completion_charp = query; matches = rl_completion_matches(text, complete_from_query); } while(0)
 #define COMPLETE_WITH_LIST(list) \
-do { completion_charpp = list; matches = completion_matches(text, complete_from_list); } while(0)
+do { completion_charpp = list; matches = rl_completion_matches(text, complete_from_list); } while(0)
 #define COMPLETE_WITH_CONST(string) \
-do { completion_charp = string; matches = completion_matches(text, complete_from_const); } while(0)
+do { completion_charp = string; matches = rl_completion_matches(text, complete_from_const); } while(0)
 #define COMPLETE_WITH_ATTR(table) \
-do {completion_charp = Query_for_list_of_attributes; completion_info_charp = table; matches = completion_matches(text, complete_from_query); } while(0)
+do {completion_charp = Query_for_list_of_attributes; completion_info_charp = table; matches = rl_completion_matches(text, complete_from_query); } while(0)
 
 
 /* The completion function. Acc. to readline spec this gets passed the text
@@ -257,7 +257,7 @@
 /* CREATE or DROP */
 	/* complete with something you can create or drop */
 	else if (strcasecmp(prev_wd, "CREATE") == 0 || strcasecmp(prev_wd, "DROP") == 0)
-		matches = completion_matches(text, create_command_generator);
+		matches = rl_completion_matches(text, create_command_generator);
 
 /* ALTER */
 	/* complete with what you can alter (TABLE or USER) */
@@ -619,8 +619,8 @@
 		   strcmp(prev_wd, "\\w") == 0 || strcmp(prev_wd, "\\write") == 0
 		)
 	{
-#ifdef HAVE_FILENAME_COMPLETION_FUNCTION
-		matches = completion_matches(text, filename_completion_function);
+#ifdef HAVE_RL_FILENAME_COMPLETION_FUNCTION
+		matches = rl_completion_matches(text, rl_filename_completion_function);
 #else
 
 		/*
@@ -728,7 +728,7 @@
    etc.
 */
 static char *
-complete_from_query(char *text, int state)
+complete_from_query(const char *text, int state)
 {
 	static int	list_index,
 				string_length;
@@ -776,7 +776,7 @@
    SQL words that can appear at certain spot.
 */
 static char *
-complete_from_list(char *text, int state)
+complete_from_list(const char *text, int state)
 {
 	static int	string_length,
 				list_index;
@@ -810,7 +810,7 @@
    The string to be passed must be in completion_charp.
 */
 static char *
-complete_from_const(char *text, int state)
+complete_from_const(const char *text, int state)
 {
 	(void) text;				/* We don't care about what was entered
 								 * already. */
--- postgresql-7.0.3/src/configure.in.wiget	Fri Apr 13 17:53:57 2001
+++ postgresql-7.0.3/src/configure.in	Fri Apr 13 17:55:00 2001
@@ -915,14 +915,14 @@
 dnl Check for readline's filename_completion_function.
 dnl Some versions have it but it's not in the headers, so we have to take
 dnl care of that, too.
-AC_CHECK_FUNCS(filename_completion_function,
-    AC_EGREP_HEADER(filename_completion_function, readline.h,
-        AC_DEFINE(HAVE_FILENAME_COMPLETION_FUNCTION_DECL),
-        [AC_EGREP_HEADER(filename_completion_function, readline/readline.h,
-            AC_DEFINE(HAVE_FILENAME_COMPLETION_FUNCTION_DECL))])
+AC_CHECK_FUNCS(rl_filename_completion_function,
+    AC_EGREP_HEADER(rl_filename_completion_function, readline.h,
+        AC_DEFINE(HAVE_RL_FILENAME_COMPLETION_FUNCTION_DECL),
+        [AC_EGREP_HEADER(rl_filename_completion_function, readline/readline.h,
+            AC_DEFINE(HAVE_RL_FILENAME_COMPLETION_FUNCTION_DECL))])
 )
-AC_SUBST(HAVE_FILENAME_COMPLETION_FUNCTION)
-AC_SUBST(HAVE_FILENAME_COMPLETION_FUNCTION_DECL)
+AC_SUBST(HAVE_RL_FILENAME_COMPLETION_FUNCTION)
+AC_SUBST(HAVE_RL_FILENAME_COMPLETION_FUNCTION_DECL)
 
 dnl Check for GNU style long options support (getopt_long)
 AC_CHECK_FUNCS(getopt_long)
